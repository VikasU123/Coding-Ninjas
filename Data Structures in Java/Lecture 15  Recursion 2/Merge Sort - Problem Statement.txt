/*
Merge Sort - Problem Statement
Send Feedback
Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
2 1 5 2 3
Sample Output 2 :
1 2 2 3 5 
*/

public class solution {

	// Merge function.
    static void merge(int input[], int left, int mid, int right, int temp[]) {

        // Initial indices.
        int i = left, j = mid + 1, k = 0;
        while (i <= mid && j <= right) {
            if (input[i] < input[j]) {
                temp[k] = input[i];
                k++;
                i++;
            } 
            else {
                temp[k] = input[j];
                j++;
                k++;
            }
        }

        // Copy the remaining elements, if there are any.
        while (i <= mid) {
            temp[k] = input[i];
            k++;
            i++;
        }

        // Copy the remaining elements, if there are any.
        while (j <= right) {
            temp[k] = input[j];
            j++;
            k++;
        }
        for (int x = 0, y = left; x < k; x++, y++) {
            input[y] = temp[x];
        }
    }

    static void mergeSort(int input[], int temp[], int start, int end) {
        if (end <= start) {
            return;
        } 
        else {
            int mid = (end + start) / 2;
            mergeSort(input, temp, start, mid);
            mergeSort(input, temp, mid + 1, end);
            merge(input, start, mid, end, temp);
        }
    }


	public static void mergeSort(int[] input){
		// Write your code here
		int n=input.length;
		int temp[]=new int[n];
		mergeSort(input, temp, 0, n - 1);
		
	}
}
