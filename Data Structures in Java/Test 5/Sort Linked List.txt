// Sort Linked List
// Send Feedback
// Given a linked list of 'N' nodes, which has nodes in alternating non-decreasing and non-increasing. Sort the list in non-decreasing order.


// For Example:
// If given linked list is 1->9->3->8->4 then it should be modified to 1->3->4->8->9.
// Input Format :
// The first line contains an integer 'N', the size of the linked list.
// The second line contains 'N' space-separated integers in alternating ascending and descending orders.
// Output Format :
// The output contains all the integers in non-decreasing order.
// Note :
// You are not required to print the output, it has already been taken care of. Just implement the function.
// Follow up :
// Try to solve this problem in O(1) space complexity.
// Sample Input 1 :
// 7
// 1 9 2 8 3 7 4 
// Sample Output 1 :
// 1 2 3 4 7 8 9
// Explanation to Sample Input 1 :
// Since the given list is 1-> 9-> 2-> 8 -> 3 -> 7-> 4.
// After sorting, it will be 1-> 2-> 3-> 4-> 7-> 8-> 9.
// Sample Input 2 :
// 6
// 7 15 8 14 9 13
// Sample Output 2 :
// 7 8 9 13 14 15    
// Explanation to Sample Input 1 :
// Since the given list is 7-> 15-> 8-> 14 -> 9 -> 13.
// After sorting, it will be 7-> 8-> 9-> 13-> 14-> 15.
// Constraints :
// 1 <= N <= 10^3
// 0 <= data <= 10^3 

// Where 'N' is the length of the linked list.

// Time Limit: 1 sec



public class Solution {

	public static LinkedListNode<Integer> sort(LinkedListNode<Integer> head) {
		//Your code goes here
		if (head == null)
			return head;
		if (head.next == null)
			return head;
		LinkedListNode<Integer> midNode = findmid(head);
		LinkedListNode<Integer> h2 = midNode.next;
		midNode.next = null;
		LinkedListNode<Integer> part1 = sort(head);
		LinkedListNode<Integer> part2 = sort(h2);
		LinkedListNode<Integer> mergedList = mergeTwoList(part1, part2);
		return mergedList;

	}

	private static LinkedListNode<Integer> findmid(LinkedListNode<Integer> head) {
		if (head == null)
			return head;
		LinkedListNode<Integer> slow = head, fast = head;
		while (fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}

	public static LinkedListNode<Integer> mergeTwoList(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
		if (head1 == null)
			return head2;
		if (head2 == null)
			return head1;
		LinkedListNode<Integer> t1 = head1, t2 = head2, tail = null, head = null;
		if (t1.data <= t2.data) {
			head = t1;
			tail = t1;
			t1 = t1.next;
		} else {
			head = t2;
			tail = t2;
			t2 = t2.next;
		}
		while (t1 != null && t2 != null) {
			if (t1.data <= t2.data) {
				tail.next = t1;
				tail = t1;
				t1 = t1.next;
			} else {
				tail.next = t2;
				tail = tail.next;
				t2 = t2.next;
			}
		}
		if (t1 == null)
			tail.next = t2;
		if (t2 == null)
			tail.next = t1;
		return head;
	}

}