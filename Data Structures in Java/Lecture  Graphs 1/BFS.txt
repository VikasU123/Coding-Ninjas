// BFS

// Given an undirected and disconnected graph G(V, E), print its BFS traversal.
// Note:
// 1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
// 2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
// 3. E is the number of edges present in graph G.
// 4. Take graph input in the adjacency matrix.
// 5. Handle for Disconnected Graphs as well
// Input Format :
// The first line of input contains two integers, that denote the value of V and E.
// Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
// Output Format :
// Print the BFS Traversal, as described in the task.
// Constraints :
// 0 <= V <= 1000
// 0 <= E <= (V * (V - 1)) / 2
// 0 <= a <= V - 1
// 0 <= b <= V - 1
// Time Limit: 1 second
// Sample Input 1:
// 4 4
// 0 1
// 0 3
// 1 2
// 2 3
// Sample Output 1:
// 0 1 3 2



import java.util.*;
import java.util.LinkedList;
import java.util.Queue;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Solution {

	public static void bfTraversal(int[][] abjMatrix){
		Queue<Integer> pendingVertices=new LinkedList<>();
		boolean visited[]=new boolean[abjMatrix.length];
		visited[0]=true;
		pendingVertices.add(0);

		while(!pendingVertices.isEmpty()){
			int currentVertex=pendingVertices.poll();
			System.out.print(currentVertex+" ");
			for(int i=0;i<abjMatrix.length;i++){
				if(abjMatrix[currentVertex][i]==1 && !visited[i]){
					pendingVertices.add(i);
					visited[i]=true;
				}
			}
		}
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
        
        /* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */
		 Scanner s=new Scanner(System.in);
		 int n=s.nextInt();
		 int e=s.nextInt();
		 if(n==0 && e==0){
			 return;
		 }
		 if(e==0){
			 for(int i=0;i<n;i++){
				 System.out.print(i+" ");
			 }
			 return;
		 }
		 int abjMatrix[][]=new int[n][n];
		 for(int i=0;i<e;i++){
			 int v1=s.nextInt();
			 int v2=s.nextInt();
			 abjMatrix[v1][v2]=1;
			 abjMatrix[v2][v1]=1;
		 }
		 bfTraversal(abjMatrix);
	}

}